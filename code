import cv2
import numpy as np

def up_up_and_away():

    #cap = cv2.VideoCapture("daawg.mp4")
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Error: Could not open camera.")
        return

    while True:
        ret, frame = cap.read()
       
        if ret:
            image = prosses_fram(frame)
            cv2.imshow(":)", image)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    cap.release()
    cv2.destroyAllWindows()

def prosses_fram(image):
   
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    edges = cv2.Canny(blurred, 50, 150)
   
    region = mask_select(edges, image)
   
    hasselHOUGH = cv2.HoughLinesP(region, 1, np.pi/180, 100, minLineLength=100, maxLineGap=50)
   
    finished = everythin_else(image, hasselHOUGH)
   
    return finished


def mask_select(edge_image, image):
    height = image.shape[0]
    width = image.shape[1]
    mask = np.zeros_like(edge_image)
    #roi = np.array([[(0, height), (0, height/2), (width, height/2), (width, height)]], dtype=np.int32)
    roi = np.array([[(0, 780), (430, 110), (790, 110), (1280, 780)]], dtype=np.int32)
   
   
   
    cv2.fillPoly(mask, roi, 255)
    masked_edges = cv2.bitwise_and(edge_image, mask)
    return masked_edges

   
def everythin_else(image, lines):
   
    left_line = None
    right_line = None
   
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = line[0]
           
            cv2.line(image, (x1, y1), (x2, y2), (0, 110, 255), 3)
            cv2.line(image, (0, 780), (430, 110), (255, 0, 100), 1)
            cv2.line(image, (430, 110), (790, 110), (255, 0, 100), 1)
            cv2.line(image, (790, 110), (1280, 780), (255, 0, 100), 1)
            cv2.line(image, (1280, 780), (0, 780), (255, 0, 100), 1)
            slope = (y2 - y1) / (x2 - x1)
           
            # > = greater than
            # < = less than
            if slope > 0:
                right_line = line
            elif slope < 0:
                left_line = line
           
           
   
    if left_line is not None and right_line is not None:
        print("Straight")
    elif left_line is not None:
        print("Right")
    elif right_line is not None:
        print("Left")
    else:
        print("No lines detected")


    return image

if __name__ == "__main__":
    up_up_and_away()
